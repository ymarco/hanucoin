import threading
import Queue
import socket
import hashspeed

def HandleSoc(soc):
	hanukc = open("hanukcoin.bin")
	cmd=struct.unpack(">I",hanukc.read(4))
	start_nodes=struct.unpack(">I",hanukc.read(4))
	node_count=struct.unpack(">I",hanukc.read(4))
	nodes={}
	for x in xrange(node_count):
		name_len=struct.unpack("B",hanukc.read(1))
		name=hanukc.read(name_len)
		host_len=struct.unpack("B",hanukc.read(1))
		host=hanukc.read(host_len)
		port=struct.unpack(">H",hanukc.read(2))
		last_seen_ts=struct.unpack(">I",hanukc.read(4))
		nodes[name]=(host,port,last_seen_ts)

	start_blocks=struct.unpack(">I",hanukc.read(4))
	block_count=struct.unpack(">I",hanukc.read(4))
	for x in xrange(block_count):
		serial_number=struct.unpack(">I",hanukc.read(4))
		wallet=






#listen_socket is global
TCP_IP = '127.0.0.1'
TCP_PORT = 5005
listen_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
listen_socket.bind((TCP_IP, TCP_PORT))
listen_socket.listen(1)
g_queue = Queue.Queue()

def AcceptLoop():
   global g_queue
   while True:
       soc, addr = listen_socket.accept()  # synchronous, blocking
       g_queue.put(soc)


threading.Thread(target=AcceptLoop).start()



while True:
   # soc is a new accepted socket
   try:
       soc = g_queue.get()
       sockets.append(soc)  # add to list
   except Queue.Empty:
       soc = None

   #HandleAllSockets()  # handle sockets[i]
   #DoSomeCoinMining()
   time.sleep(0.1)  # if you don't want the laptop to hang.
